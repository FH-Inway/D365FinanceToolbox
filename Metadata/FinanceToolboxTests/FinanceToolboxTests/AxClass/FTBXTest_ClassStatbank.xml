<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXTest_ClassStatbank</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.HttpStatusCode;
using SysCollections = System.Collections.Generic;

internal final class FTBXTest_ClassStatbank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        // Create instances of VariableDataContract
        FTBXExchangeRateProviderCBODKStatbankVariableContract variable1 = new FTBXExchangeRateProviderCBODKStatbankVariableContract();
        variable1.parmCode("VALUTA");
        List values1 = new List(Types::String);
        values1.addEnd("EUR");
        values1.addEnd("PLN");
        variable1.parmValues(values1);

        FTBXExchangeRateProviderCBODKStatbankVariableContract variable2 = new FTBXExchangeRateProviderCBODKStatbankVariableContract();
        variable2.parmCode("KURTYP");
        List values2 = new List(Types::String);
        values2.addEnd("KBH");
        variable2.parmValues(values2);

        FTBXExchangeRateProviderCBODKStatbankVariableContract variable3 = new FTBXExchangeRateProviderCBODKStatbankVariableContract();
        variable3.parmCode("TID");
        List values3 = new List(Types::String);
        values3.addEnd("2024M06*");
        variable3.parmValues(values3);

        // Create instance of RequestDataContract and set properties
        FTBXExchangeRateProviderCBODKStatbankRequestContract request = new FTBXExchangeRateProviderCBODKStatbankRequestContract();
        request.parmLang("en");
        request.parmTable("DNVALD");
        request.parmFormat("DSTML");
        request.parmTimeOrder("Ascending");

        // Add variables to the request
        List variables = new List(Types::Class);
        variables.addEnd(variable1);
        variables.addEnd(variable2);
        variables.addEnd(variable3);
        request.parmVariables(variables);

        // Serialize to JSON using FormJsonSerializer
        str json = FormJsonSerializer::serializeClass(request);

        var httpClient = new HttpClient();
        httpClient.Timeout = new System.TimeSpan(0, 10, 0);

        var httpMethod = new HttpMethod('post');

        var httpRequestMessage = new HttpRequestMessage(httpMethod, 'https://api.statbank.dk/v1/data');
        httpRequestMessage.Content = new StringContent(json, System.Text.Encoding::UTF8, 'application/json');

        HttpResponseMessage responseMessage = httpClient.SendAsync(httpRequestMessage)
                .ConfigureAwait(false)
                .GetAwaiter()
                .GetResult();

        if (responseMessage && responseMessage.Content)
        {
            str responseText = responseMessage.Content.ReadAsStringAsync()
                        .ConfigureAwait(false)
                        .GetAwaiter()
                        .GetResult();

            XmlDocument structureXML = XmlDocument::newXml(responseText);

            XmlNodeList dataNodes = structureXML.getElementsByTagName('Variable');

            str dateVariableCode;
            str currencyVariableCode;

            for (int i = 0; i < dataNodes.length(); i++)
            {
                XmlNode dataNode = dataNodes.item(i);
                var attributes = dataNode.attributes();

                switch(attributes.getNamedItem('Text').Value())
                {
                    case 'currency' : currencyVariableCode  = attributes.getNamedItem('Code').Value(); break;
                    case 'time'     : dateVariableCode      = attributes.getNamedItem('Code').Value(); break;
                };
            }

            dataNodes = structureXML.getElementsByTagName('Data');

            for (int i = 0; i < dataNodes.length(); i++)
            {
                XmlNode dataNode = dataNodes.item(i);

                XmlNodeList rateList = dataNode.childNodes();

                for (int y = 0; y < rateList.length(); y++)
                {
                    XmlNode rateNode = rateList.item(y);
                    var attributes = rateNode.attributes();

                    Info(strFmt("%1:%2:%3", 
                        attributes.getNamedItem(dateVariableCode).Value(),
                        attributes.getNamedItem(currencyVariableCode).Value(),
                        rateNode.text()));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>