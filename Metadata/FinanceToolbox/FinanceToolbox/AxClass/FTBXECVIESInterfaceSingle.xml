<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXECVIESInterfaceSingle</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Http;
using System.Net.Http.Headers;

/// <summary>
/// Implementation of VIES VAT number validation, that uses the direct validation API
/// </summary>
internal final class FTBXECVIESInterfaceSingle extends FTBXECVIESInterfaceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processResponseMessage</Name>
				<Source><![CDATA[
    private void processResponseMessage(
        FTBXECVIESCheckResult _checkResult, 
        str _request,
        System.Net.Http.HttpResponseMessage _responseMessage)
    {
        if (_responseMessage.Content)
        {
            str response = _responseMessage.Content.ReadAsStringAsync()
                .ConfigureAwait(false)
                .GetAwaiter()
                .GetResult();

            //Try to deserialize it as a message without error
            FTBXECVIESAPICheckVatNumberResponseContract statusContract =
                FormJsonSerializer::deserializeObjectStrict(
                    classNum(FTBXECVIESAPICheckVatNumberResponseContract),
                    response);

            if (statusContract)
            {
                _checkResult.setResultValues(
                    statusContract.parmName(),
                    statusContract.parmAddress(),
                    statusContract.parmValid() ? FTBXECVIESVATNumberStatus::Valid : FTBXECVIESVATNumberStatus::Invalid,
                    '',
                    saveAPIMessages ? _request : '',
                    saveAPIMessages ? response : '');
            }
            else
            {
                this.processResponseError(_checkResult, _request, response);
            }
        }
        else
        {
            _checkResult.setResultValues(
                '',
                '',
                FTBXECVIESVATNumberStatus::VIESError,
                "VIES API did not return a response",
                saveAPIMessages ? _request : '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResponseError</Name>
				<Source><![CDATA[
    private void processResponseError(
        FTBXECVIESCheckResult _checkResult, 
        str _request,
        str _response)
    {
        FTBXECVIESAPIErrorResponsesContract errorContract =
            FormJsonSerializer::deserializeObjectStrict(
                classNum(FTBXECVIESAPIErrorResponsesContract),
                _response);

        if (errorContract)
        {
            if (errorContract.parmErrorWrappers().elements() > 0)
            {
                var errorWrapper = errorContract
                    .parmErrorWrappers()
                    .getEnumerator()
                    .current();

                _checkResult.setResultValues(
                    '',
                    '',
                    FTBXECVIESVATNumberStatus::VIESError,
                    strFmt("%1\n%2", errorWrapper.parmError(), errorWrapper.parmMessage()),
                    saveAPIMessages ? _request : '',
                    saveAPIMessages ? _response : '');

                //TODO: Check conditions where the VIES check might be blocked because of too many requests
            }
            else
            {
                _checkResult.setResultValues(
                    '',
                    '',
                    FTBXECVIESVATNumberStatus::VIESError,
                    "@FinanceToolbox:ECVIESGenericWebServiceInvalidResponse",
                    saveAPIMessages ? _request : '',
                    saveAPIMessages ? _response : '');
            }
        }
        else
        {
            _checkResult.setResultValues(
                '',
                '',
                FTBXECVIESVATNumberStatus::VIESError,
                "@FinanceToolbox:ECVIESGenericWebServiceInvalidResponse",
                saveAPIMessages ? _request : '',
                saveAPIMessages ? _response : '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMemberStateAvailable</Name>
				<Source><![CDATA[
    private boolean isMemberStateAvailable(EUSalesListTax _salesTaxCode)
    {
        return FTBXECVIESAvailableMemberStates::isMemberStateAvailable(_salesTaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeValidation</Name>
				<Source><![CDATA[
    public void invokeValidation()
    {        
        SetEnumerator enumerator = vatValidationResults.getEnumerator();

        while (enumerator.moveNext())
        {
            FTBXECVIESCheckResult checkResult = enumerator.current();

            if (checkResult.vatCountry() && checkResult.vatNum())
            {
                if (this.isMemberStateAvailable(checkResult.vatCountry()))
                {
                    var httpRequestMessage  = new HttpRequestMessage(
                        new HttpMethod('post'),
                        parameters.VIESAPIURLVatCheck);

                    str request = FormJsonSerializer::serializeClass(
                        FTBXECVIESAPICheckVatNumberRequestContract::construct()
                        .setCountryCode(checkResult.vatCountry())
                        .setVatNumber(checkResult.vatNumTested()));

                    httpRequestMessage.Content = new StringContent(
                        request,
                        System.Text.Encoding::UTF8,
                        'application/json');

                    System.Net.Http.HttpResponseMessage responseMessage = httpClient.SendAsync(httpRequestMessage)
                        .ConfigureAwait(false)
                        .GetAwaiter()
                        .GetResult();

                    if (responseMessage)
                    {
                        this.processResponseMessage(
                            checkResult, 
                            request,
                            responseMessage);
                    }
                    else
                    {
                        checkResult.setResultValues(
                            '',
                            '',
                            FTBXECVIESVATNumberStatus::VIESError,
                            "@FinanceToolbox:ECVIESGenericWebServiceInvalidResponse");
                    }
                }
                else
                {
                    checkResult.setResultValues(
                        '',
                        '',
                        FTBXECVIESVATNumberStatus::VIESNotAvailable,
                        '');
                }
                
                this.validationResultUpdated(checkResult);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>